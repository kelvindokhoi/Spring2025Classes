import heapq

while True:
    lst=[*map(int,input().split())]
    heapq.heapify(lst)
    # heapq._heapify_max(lst)
    while len(lst)>0:
        m = heapq.heappop(lst)
        print(lst)
        while len(lst)>0:
            n=len(lst)
            smallest = lst[0]
            print(smallest)
            leafval= lst[n-1]
            lst=lst[:n-1]
            n-=1
            lst[0]=leafval
            i=0
            while True:
                if len(lst)==0:
                    break
                leftchild= 2*i +1
                rightchild = 2*i + 2
                if leftchild > n-1:break
                else:pass
                if rightchild > n-1:
                    c1=lst[rightchild]
                    if c1<lst[i]:
                        lst[i],lst[leftchild]=lst[leftchild],lst[i]
                        break
                else:
                    pass
                c1 = lst[leftchild]
                c2= lst[rightchild]
                if lst[i]>c1 or lst[i]>c2:
                    if c1<c2:
                        lst[i],lst[leftchild]=lst[leftchild],lst[i]
                        i=leftchild
                    else:
                        lst[i],lst[rightchild]=lst[rightchild],lst[i]
                        i=rightchild
                else:break